{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","components/ContactListItem/ContactListItem.module.css","components/ContactList/ContactList.module.css","redux/contacts/selectors.js","redux/contacts/actions.js","redux/contacts/contactsSlice.js","components/Filter/Filter.js","components/ContactForm/ContactForm.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","App.js","redux/contacts/reducer.js","redux/store.js","index.js"],"names":["module","exports","filterValue","state","filter","filterContact","createAction","contactsApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","tagTypes","endpoints","builder","fetchContacts","query","providesTags","deleteContact","mutation","contactId","url","method","invalidatesTags","createContact","name","number","body","phone","useFetchContactsQuery","useDeleteContactMutation","useCreateContactMutation","Filter","dispatch","useDispatch","useSelector","contacts","data","isLoading","length","className","s","filterWrapper","type","value","onChange","event","target","filterInput","ContactForm","useState","setName","setNumber","isUpdating","handleChange","e","reset","onSubmit","preventDefault","some","contact","alert","form","input","pattern","title","required","btn","disabled","color","height","width","ContactListItem","isDeleting","contactItem","btnDel","onClick","id","timeout","prototype","PropTypes","shape","string","isRequired","onDeleteContact","func","ContactList","isFetching","filterContacts","setContacts","useEffect","toLowerCase","includes","error","contactList","map","visibleContacts","arrayOf","App","createReducer","_","payload","combineReducers","store","configureStore","reducer","middleware","getDefaultMiddleware","setupListeners","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.da5d57ff.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2ZW-N\",\"input\":\"ContactForm_input__21X5L\",\"btn\":\"ContactForm_btn__23CEa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterWrapper\":\"Filter_filterWrapper__27PQj\",\"filterInput\":\"Filter_filterInput__2tB98\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactItem\":\"ContactListItem_contactItem__3njYX\",\"btnDel\":\"ContactListItem_btnDel__2Ajkg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__317t-\"};","export const filterValue = state => state.filterValue.filter;\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const filterContact = createAction('contacts/filter');\r\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\r\n\r\nexport const contactsApi = createApi({\r\n  reducerPath: 'contactsApi',\r\n  baseQuery: fetchBaseQuery({\r\n    baseUrl: 'https://61cb013e194ffe0017788ada.mockapi.io',\r\n  }),\r\n  tagTypes: ['contact'],\r\n  endpoints: builder => ({\r\n    fetchContacts: builder.query({\r\n      query: () => `/contacts/`,\r\n      providesTags: ['contact'],\r\n    }),\r\n    deleteContact: builder.mutation({\r\n      query: contactId => ({\r\n        url: `/contacts/${contactId}`,\r\n        method: 'DELETE',\r\n      }),\r\n      invalidatesTags: ['contact'],\r\n    }),\r\n    createContact: builder.mutation({\r\n      query: (name, number) => ({\r\n        url: '/contacts',\r\n        method: 'POST',\r\n        body: {\r\n          name,\r\n          phone: number,\r\n        },\r\n      }),\r\n      invalidatesTags: ['contact'],\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const {\r\n  useFetchContactsQuery,\r\n  useDeleteContactMutation,\r\n  useCreateContactMutation,\r\n} = contactsApi;\r\n","import React from 'react';\r\nimport s from './Filter.module.css';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { filterValue } from '../../redux/contacts/selectors';\r\nimport { filterContact } from '../../redux/contacts/actions';\r\nimport { useFetchContactsQuery } from '../../redux/contacts/contactsSlice';\r\n\r\nconst Filter = () => {\r\n  const dispatch = useDispatch();\r\n  const filter = useSelector(filterValue);\r\n  const { data: contacts, isLoading } = useFetchContactsQuery();\r\n\r\n  if (!isLoading && !contacts.length) {\r\n    return <p>Your phonebook is empty. Please add contact.</p>;\r\n  }\r\n  return (\r\n    <div className={s.filterWrapper}>\r\n      <label>\r\n        Find contacts by name\r\n        <input\r\n          type=\"text\"\r\n          value={filter}\r\n          onChange={event => dispatch(filterContact(event.target.value))}\r\n          className={s.filterInput}\r\n        />\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import s from './ContactForm.module.css';\r\nimport { useState } from 'react';\r\nimport { useCreateContactMutation } from '../../redux/contacts/contactsSlice';\r\nimport { useFetchContactsQuery } from '../../redux/contacts/contactsSlice';\r\nimport Loader from 'react-loader-spinner';\r\n\r\nfunction ContactForm() {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const [createContact, { isLoading: isUpdating }] = useCreateContactMutation();\r\n  const { data: contacts } = useFetchContactsQuery();\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.target;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    contacts.some(contact => contact.name === name)\r\n      ? alert(`${name} is already in contacts`)\r\n      : createContact(name, number);\r\n\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className={s.form}>\r\n      <label>\r\n        Name\r\n        <input\r\n          className={s.input}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={name}\r\n          onChange={handleChange}\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n        />\r\n      </label>\r\n      <label>\r\n        Number\r\n        <input\r\n          className={s.input}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          value={number}\r\n          onChange={handleChange}\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n        />\r\n      </label>\r\n      <button type=\"submit\" className={s.btn} disabled={isUpdating}>\r\n        {isUpdating ? (\r\n          <Loader type=\"Circles\" color=\"lightblue\" height={20} width={100} />\r\n        ) : (\r\n          'Add contact'\r\n        )}\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default ContactForm;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './ContactListItem.module.css';\r\nimport { useDeleteContactMutation } from '../../redux/contacts/contactsSlice';\r\nimport Loader from 'react-loader-spinner';\r\n\r\nconst ContactListItem = ({ contact }) => {\r\n  const [deleteContact, { isLoading: isDeleting }] = useDeleteContactMutation();\r\n\r\n  return (\r\n    <li className={s.contactItem}>\r\n      {contact.name}: {contact.phone}\r\n      <button\r\n        type=\"button\"\r\n        className={s.btnDel}\r\n        disabled={isDeleting}\r\n        onClick={() => deleteContact(contact.id)}\r\n      >\r\n        {isDeleting ? (\r\n          <Loader\r\n            type=\"Circles\"\r\n            color=\"lightblue\"\r\n            height={12}\r\n            width={12}\r\n            timeout={0}\r\n          />\r\n        ) : (\r\n          'Delete'\r\n        )}\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nContactListItem.prototype = {\r\n  contact: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    number: PropTypes.string.isRequired,\r\n  }),\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\nexport default ContactListItem;\r\n","import PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport ContactListItem from '../ContactListItem';\r\nimport s from './ContactList.module.css';\r\nimport { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useFetchContactsQuery } from '../../redux/contacts/contactsSlice';\r\nimport { filterValue } from '../../redux/contacts/selectors';\r\nimport Loader from 'react-loader-spinner';\r\n\r\nconst ContactList = () => {\r\n  const { data: contacts, isFetching } = useFetchContactsQuery();\r\n  const [filterContacts, setContacts] = useState([]);\r\n  const value = useSelector(filterValue);\r\n\r\n  useEffect(() => {\r\n    try {\r\n      setContacts(\r\n        contacts.filter(({ name }) =>\r\n          name.toLowerCase().includes(value.toLowerCase()),\r\n        ),\r\n      );\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }, [contacts, value]);\r\n\r\n  return (\r\n    <ul className={s.contactList}>\r\n      {isFetching && (\r\n        <Loader\r\n          type=\"Circles\"\r\n          color=\"lightblue\"\r\n          height={80}\r\n          width={80}\r\n          timeout={0}\r\n        />\r\n      )}\r\n      {filterContacts &&\r\n        filterContacts.map(contact => (\r\n          <ContactListItem key={contact.id} contact={contact} />\r\n        ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactList.prototype = {\r\n  visibleContacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n      id: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\nexport default ContactList;\r\n","import './App.css';\r\nimport Filter from './components/Filter';\r\nimport ContactForm from './components/ContactForm';\r\nimport ContactList from './components/ContactList';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Phonebook</h1>\r\n      <ContactForm />\r\n      <h2> Contacts</h2>\r\n      <Filter />\r\n      <ContactList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport { combineReducers } from 'redux';\r\nimport { filterContact } from './actions';\r\n\r\nconst filter = createReducer('', {\r\n  [filterContact]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  filter,\r\n});\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport { contactsApi } from './contacts/contactsSlice';\r\nimport { setupListeners } from '@reduxjs/toolkit/query';\r\nimport filter from './contacts/reducer';\r\nexport const store = configureStore({\r\n  reducer: {\r\n    [contactsApi.reducerPath]: contactsApi.reducer,\r\n    filterValue: filter,\r\n  },\r\n  middleware: getDefaultMiddleware => [\r\n    ...getDefaultMiddleware(),\r\n    contactsApi.middleware,\r\n  ],\r\n});\r\n\r\nsetupListeners(store.dispatch);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}